package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal String  MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, IGUALIGUAL, DIFERENTE, AND, OR, NOT;
nonterminal NodoC3D inicial, expresion, explogica, exprel, simrel, valor;

precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MAYOR, MENOR, MAYORIGUAL, MENORIGUAL, IGUALIGUAL, DIFERENTE;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} explogica:exp 
                    {: 
						System.out.println(exp.getCad());
                        if(exp.getCad().equalsIgnoreCase("")==false)
                        {
             	           ControlC3D.agregarC3D("//Ultimo valor: "+exp.getCad());
                 		}
                 		else
                 		{
                 		 ControlC3D.agregarC3D("//Etiqueta verdadera: " + exp.getVerdadero() +"\n//Etiqueta falsa: "+exp.getFalso());
                 		}
                 		RESULT = exp;
                    :};
					
explogica		::= explogica:izq AND 
					{:
						String c3d=izq.getVerdadero()+":\n";
						ControlC3D.agregarC3D(c3d);
					:}
					explogica:der
					{: 
                        RESULT = new NodoC3D("",der.getVerdadero(),izq.getFalso()+","+der.getFalso());  
                    :}
				|explogica:izq OR 
					{:
						String c3d=izq.getFalso()+":\n";
						ControlC3D.agregarC3D(c3d);
					:}
					explogica:der
					{: 
                        RESULT = new NodoC3D("",izq.getVerdadero() +","+der.getVerdadero(),der.getFalso()); 
                    :}
				|NOT PAR_IZQ explogica:exp PAR_DER
					{: 
                        String v=exp.getFalso();
                        String f=exp.getVerdadero();
                        RESULT = new NodoC3D("",v,f); 
                    :}
				|exprel:exp
						{: RESULT = exp; :}
					;
					
exprel		::= expresion:izq simrel:s expresion:der
					{: 
                        String v=ControlC3D.generaEtq();
                        String f=ControlC3D.generaEtq();
                        String c3d = "if " + izq.getCad() + " " + s.getCad() + " " + der.getCad() + " then goto "+v+"\n";
                        c3d+="goto "+f+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D("",v,f); 
                    :}
				|expresion:exp
					{: RESULT = exp; :}
					;
					
simrel		::=	MAYOR:s
					{: RESULT = new NodoC3D(s); :}
				|MENOR:s
					{: RESULT = new NodoC3D(s); :}
				|MAYORIGUAL:s
					{: RESULT = new NodoC3D(s); :}
				|MENORIGUAL:s
					{: RESULT = new NodoC3D(s); :}
				|IGUALIGUAL:s
					{: RESULT = new NodoC3D(s); :}
				|DIFERENTE:s
					{: RESULT = new NodoC3D(s); :}
					;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
			|	valor:exp
					{:
						RESULT = exp;
					:}
			;
			
    valor	::=   MENOS valor:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ explogica:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;